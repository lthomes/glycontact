{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GlyContact: 3D Analysis of Glycan Structures","text":"<p>GlyContact is a Python package for retrieving, processing, and analyzing 3D glycan structures from GlycoShape, molecular dynamics, NMR, or X-ray crystallography.</p> <p>The package is organized into the following main modules:</p> <ul> <li><code>process</code>: utilities for parsing and analyzing 3D glycan structures</li> <li><code>visualize</code>: functions for plotting contact maps and glycan features</li> <li><code>learning</code>: functions for training and using machine learning models</li> <li><code>lwca</code>: ...</li> </ul> <p></p> <p>GlyContact provides a comprehensive toolkit that enables researchers to:</p> <ul> <li>Visualize complex glycan structures with 3D-SNFG symbols</li> <li>Quantify structural properties such as SASA and flexibility</li> <li>Analyze conformational preferences and structure variability</li> <li>Compare different glycan structures</li> <li>Generate structural features for machine learning applications</li> </ul> <p>These capabilities help bridge the gap between glycan sequence and function by revealing the critical spatial arrangements that determine molecular recognition.</p> <p></p>"},{"location":"#install","title":"Install","text":"<p>GlyContact can be cloned from GitHub or directly installed using pip.</p> <p>All modules in GlyContact, except for ml, can be run on any machine. For most parts of ml, however, a GPU is needed to load and run torch_geometric.</p> <p></p>"},{"location":"#requirements","title":"Requirements","text":"<p>We recommend using at least the following Python and packages versions to ensure similar functionalities and performances as described in the publication: </p> <ul> <li>Python \u2265 3.12.6 </li> <li>glycowork \u2265 1.6 </li> <li>scipy \u2265 1.11</li> </ul> <p></p>"},{"location":"#installation-using-pip","title":"Installation using pip","text":"<p>If you are using pip, all the required Python packages will be automatically installed with GlyContact.</p> <pre><code>pip install git+https://github.com/lthomes/glycontact/\n</code></pre> <p></p> <p>An optional <code>[ml]</code> install is available for machine learning features:</p> <pre><code>pip install git+https://github.com/lthomes/glycontact/[ml]\n</code></pre> <p></p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions to GlyContact are welcome! Please feel free to submit a Pull Request.</p> <p></p>"},{"location":"#citation","title":"Citation","text":"<p>If you use GlyContact in your research, please cite:</p> <p><code>[Citation information will be added upon publication]</code></p> <p></p>"},{"location":"#licence","title":"Licence","text":"<p>This project is licensed under the MIT License\u2014see the LICENSE file for details.</p> <p></p>"},{"location":"learning/","title":"glycontact.learning module","text":""},{"location":"learning/#glycontact.learning","title":"<code>glycontact.learning</code>","text":""},{"location":"learning/#glycontact.learning.GINSweetNet","title":"<code>GINSweetNet(lib_size: int, num_classes: int = 1, hidden_dim: int = 128, num_components: int = 5)</code>","text":"<p>               Bases: <code>Module</code></p> <p>given glycan graphs as input, predicts properties via a graph neural network</p>"},{"location":"learning/#glycontact.learning.GINSweetNet.forward","title":"<code>forward(x: torch.Tensor, edge_index: torch.Tensor) -&gt; tuple[tuple[torch.Tensor, torch.Tensor], torch.Tensor, torch.Tensor]</code>","text":"<p>Forward pass through the model.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Tensor</code> <p>Input node features [batch_size, num_nodes, hidden_dim]</p> required <code>edge_index</code> <code>Tensor</code> <p>Edge indices for the graph [2, num_edges]</p> required <p>Returns:</p> Name Type Description <code>tuple[Tensor, Tensor]</code> <p>Tuple of </p> <code>weights_logits</code> <code>Tensor</code> <p>Logits for mixture weights [batch_size, 2, num_components]</p> <code>means</code> <code>Tensor</code> <p>Mean angles in degrees [batch_size, 2, num_components]</p> <code>kappas</code> <code>tuple[tuple[Tensor, Tensor], Tensor, Tensor]</code> <p>Concentration parameters [batch_size, 2, num_components]</p> <code>sasa_pred</code> <code>tuple[tuple[Tensor, Tensor], Tensor, Tensor]</code> <p>Predicted SASA values [batch_size]</p> <code>flex_pred</code> <code>tuple[tuple[Tensor, Tensor], Tensor, Tensor]</code> <p>Predicted flexibility values [batch_size]</p>"},{"location":"learning/#glycontact.learning.VonMisesSweetNet","title":"<code>VonMisesSweetNet(lib_size: int, num_classes: int = 1, hidden_dim: int = 128, num_components: int = 5)</code>","text":"<p>               Bases: <code>Module</code></p> <p>given glycan graphs as input, predicts properties via a graph neural network</p>"},{"location":"learning/#glycontact.learning.VonMisesSweetNet.forward","title":"<code>forward(x: torch.Tensor, edge_index: torch.Tensor) -&gt; tuple[tuple[torch.Tensor, torch.Tensor, torch.Tensor], torch.Tensor, torch.Tensor]</code>","text":"<p>Forward pass through the model.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Tensor</code> <p>Input node features [batch_size, num_nodes, hidden_dim]</p> required <code>edge_index</code> <code>Tensor</code> <p>Edge indices for the graph [2, num_edges]</p> required <p>Returns:</p> Name Type Description <code>tuple[Tensor, Tensor, Tensor]</code> <p>Tuple of </p> <code>weights_logits</code> <code>Tensor</code> <p>Logits for mixture weights [batch_size, 2, num_components]</p> <code>means</code> <code>Tensor</code> <p>Mean angles in degrees [batch_size, 2, num_components]</p> <code>kappas</code> <code>tuple[tuple[Tensor, Tensor, Tensor], Tensor, Tensor]</code> <p>Concentration parameters [batch_size, 2, num_components]</p> <code>sasa_pred</code> <code>tuple[tuple[Tensor, Tensor, Tensor], Tensor, Tensor]</code> <p>Predicted SASA values [batch_size]</p> <code>flex_pred</code> <code>tuple[tuple[Tensor, Tensor, Tensor], Tensor, Tensor]</code> <p>Predicted flexibility values [batch_size]</p>"},{"location":"learning/#glycontact.learning.VonMisesSweetNet.predict_von_mises_parameters","title":"<code>predict_von_mises_parameters(x: torch.Tensor, head: torch.nn.Module, fc_weights: torch.nn.Module, fc_means: torch.nn.Module, fc_kappas: torch.nn.Module) -&gt; tuple[torch.Tensor, torch.Tensor, torch.Tensor]</code>","text":"<p>Predict mixture parameters for a given input tensor.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Tensor</code> <p>Input tensor [batch_size, hidden_dim]</p> required <code>head</code> <code>Module</code> <p>Head module for the mixture model</p> required <code>fc_weights</code> <code>Module</code> <p>Fully connected layer for weights</p> required <code>fc_means</code> <code>Module</code> <p>Fully connected layer for means</p> required <code>fc_kappas</code> <code>Module</code> <p>Fully connected layer for kappas</p> required <p>Returns:</p> Name Type Description <code>Tensor</code> <p>Tuple of </p> <code>weights_logits</code> <code>Tensor</code> <p>Logits for mixture weights [batch_size, 2, num_components]</p> <code>means</code> <code>Tensor</code> <p>Mean angles in degrees [batch_size, 2, num_components]</p> <code>kappas</code> <code>tuple[Tensor, Tensor, Tensor]</code> <p>Concentration parameters [batch_size, 2, num_components]</p>"},{"location":"learning/#glycontact.learning.angular_rmse","title":"<code>angular_rmse(predicted_graphs: list[nx.DiGraph], true_graphs: list[nx.DiGraph]) -&gt; tuple[float, float]</code>","text":"<p>Calculate the root mean square error (RMSE) for phi and psi angles.</p> <p>Parameters:</p> Name Type Description Default <code>predicted_graphs</code> <code>list[DiGraph]</code> <p>List of predicted structure graphs</p> required <code>true_graphs</code> <code>list[DiGraph]</code> <p>List of true structure graphs</p> required <p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>Tuple of RMSE for phi and psi angles</p>"},{"location":"learning/#glycontact.learning.build_baselines","title":"<code>build_baselines(data: list[nx.DiGraph], fn: callable = np.mean) -&gt; tuple[callable, callable, callable, callable]</code>","text":"<p>Build baseline functions to predict SASA, flexibility, phi, and psi angles based on monosaccharides.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list[DiGraph]</code> <p>List of structure graphs.</p> required <code>fn</code> <code>callable</code> <p>Function to aggregate values (e.g., np.mean, np.median).</p> <code>mean</code> <p>Returns:</p> Type Description <code>tuple[callable, callable, callable, callable]</code> <p>Tuple of functions for phi, psi, SASA, and flexibility.</p>"},{"location":"learning/#glycontact.learning.clean_split","title":"<code>clean_split(split: list[tuple[torch_geometric.data.Data, nx.DiGraph]], mode: Literal['mean', 'max'] = 'max') -&gt; tuple[torch_geometric.data.Data, nx.DiGraph]</code>","text":"<p>Clean the split data by condensing it to one conformer per glycan.</p> <p>Parameters:</p> Name Type Description Default <code>split</code> <code>list</code> <p>A list of tuples containing the PyTorch Geometric Data object and the structure graph.</p> required <code>mode</code> <code>str</code> <p>The mode for condensing the data. \"mean\" for mean conformer, \"max\" for maximum weight conformer.</p> <code>'max'</code> <p>Returns:</p> Name Type Description <code>list</code> <code>tuple[Data, DiGraph]</code> <p>A list of tuples containing the condensed PyTorch Geometric Data object and the structure graph.</p>"},{"location":"learning/#glycontact.learning.create_dataset","title":"<code>create_dataset(fresh: bool = True)</code>","text":"<p>Create a dataset of PyTorch Geometric Data objects from the structure graphs of glycans.</p> <p>Parameters:</p> Name Type Description Default <code>fresh</code> <code>bool</code> <p>If True, fetches the latest data. If False, uses cached data.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the training and testing datasets.</p>"},{"location":"learning/#glycontact.learning.eval_baseline","title":"<code>eval_baseline(nxgraphs: list[nx.DiGraph], phi_pred: callable, psi_pred: callable, sasa_pred: callable, flex_pred: callable) -&gt; list[nx.DiGraph]</code>","text":"<p>Evaluate the baseline model by predicting angles and properties for each graph.</p> <p>Parameters:</p> Name Type Description Default <code>nxgraphs</code> <code>list[DiGraph]</code> <p>List of structure graphs</p> required <code>phi_pred</code> <code>callable</code> <p>Function to predict phi angles</p> required <code>psi_pred</code> <code>callable</code> <p>Function to predict psi angles</p> required <code>sasa_pred</code> <code>callable</code> <p>Function to predict SASA</p> required <code>flex_pred</code> <code>callable</code> <p>Function to predict flexibility</p> required <p>Returns:</p> Type Description <code>list[DiGraph]</code> <p>List of predicted structure graphs</p>"},{"location":"learning/#glycontact.learning.evaluate_model","title":"<code>evaluate_model(model: torch.nn.Module | tuple[callable, callable, callable, callable], structures, count: int = 10)</code>","text":"<p>Evaluate the model by sampling angles and properties from the structure graphs.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Module | tuple[callable, callable, callable, callable]</code> <p>The trained model. This can be a trained SweetNet or a tuple of baseline predictors for phi, psi, SASA, and flexibility.</p> required <code>structures</code> <p>List of structure graphs</p> required <code>count</code> <code>int</code> <p>Number of samples to generate for each graph</p> <code>10</code> <p>Returns:</p> Type Description <p>Tuple of RMSE values for phi, psi, SASA, and flexibility</p>"},{"location":"learning/#glycontact.learning.get_all_structure_graphs","title":"<code>get_all_structure_graphs(glycan, stereo=None, libr=None)</code>","text":"<p>Get all structure graphs for a given glycan.</p> <p>Parameters:</p> Name Type Description Default <code>glycan</code> <code>str</code> <p>The glycan name.</p> required <code>stereo</code> <code>str</code> <p>The stereochemistry. If None, both alpha and beta are returned.</p> <code>None</code> <code>libr</code> <code>HashableDict</code> <p>A library of structures. If None, the default library is used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of tuples containing the PDB file name and the corresponding structure graph.</p>"},{"location":"learning/#glycontact.learning.graph2pyg","title":"<code>graph2pyg(g, weight, iupac, conformer)</code>","text":"<p>Convert a structure graph to a PyTorch Geometric Data object.</p> <p>Parameters:</p> Name Type Description Default <code>g</code> <code>Graph</code> <p>The structure graph.</p> required <code>weight</code> <code>float</code> <p>The weight of the graph.</p> required <code>iupac</code> <code>str</code> <p>The IUPAC name of the glycan.</p> required <code>conformer</code> <code>str</code> <p>The conformer name.</p> required <p>Returns:</p> Type Description <p>torch_geometric.data.Data: The PyTorch Geometric Data object.</p>"},{"location":"learning/#glycontact.learning.mean_conformer","title":"<code>mean_conformer(conformers: list[tuple[float, tuple[torch_geometric.data.Data, nx.DiGraph]]]) -&gt; tuple[torch_geometric.data.Data, nx.DiGraph]</code>","text":"<p>Calculate the mean conformer from a list of conformers.</p> <p>Parameters:</p> Name Type Description Default <code>conformers</code> <code>list</code> <p>A list of tuples containing the weight and the structure graph.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[Data, DiGraph]</code> <p>A tuple containing the mean PyTorch Geometric Data object and the mean structure graph.</p>"},{"location":"learning/#glycontact.learning.mixture_von_mises_nll","title":"<code>mixture_von_mises_nll(angles: torch.Tensor, weights_logits: torch.Tensor, mus: torch.Tensor, kappas: torch.Tensor) -&gt; tuple[torch.Tensor, torch.Tensor]</code>","text":"<p>Negative log-likelihood for mixture of von Mises distributions</p> <p>Parameters:</p> Name Type Description Default <code>angles</code> <code>Tensor</code> <p>True angles in degrees [batch_size, 2] (phi, psi)</p> required <code>weights_logits</code> <code>Tensor</code> <p>Raw logits for mixture weights [batch_size, 2, n_components]</p> required <code>mus</code> <code>Tensor</code> <p>Mean angles in degrees [batch_size, 2, n_components]</p> required <code>kappas</code> <code>Tensor</code> <p>Concentration parameters [batch_size, 2, n_components]</p> required <p>Returns:</p> Type Description <code>tuple[Tensor, Tensor]</code> <p>Negative log-likelihood</p>"},{"location":"learning/#glycontact.learning.node2y","title":"<code>node2y(attr)</code>","text":"<p>Extract ML task labels from node attributes.</p> <p>Parameters:</p> Name Type Description Default <code>attr</code> <code>dict</code> <p>Node attributes.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of labels for the node. If all labels are zero, returns None.</p>"},{"location":"learning/#glycontact.learning.periodic_mse","title":"<code>periodic_mse(pred: torch.Tensor, target: torch.Tensor) -&gt; tuple[torch.Tensor, torch.Tensor]</code>","text":"<p>Calculate the periodic mean squared error (MSE) for angles.</p> <p>Parameters:</p> Name Type Description Default <code>pred</code> <code>Tensor</code> <p>Predicted angles in degrees [batch_size, 2]</p> required <code>target</code> <code>Tensor</code> <p>True angles in degrees [batch_size, 2]</p> required <p>Returns:</p> Type Description <code>tuple[Tensor, Tensor]</code> <p>Tuple of MSE for phi and psi angles</p>"},{"location":"learning/#glycontact.learning.periodic_rmse","title":"<code>periodic_rmse(pred: torch.Tensor, target: torch.Tensor) -&gt; tuple[torch.Tensor, torch.Tensor]</code>","text":"<p>Calculate the periodic root mean square error (RMSE) for angles.</p> <p>Parameters:</p> Name Type Description Default <code>pred</code> <code>Tensor</code> <p>Predicted angles in degrees [batch_size, 2]</p> required <code>target</code> <code>Tensor</code> <p>True angles in degrees [batch_size, 2]</p> required <p>Returns:</p> Type Description <code>tuple[Tensor, Tensor]</code> <p>Tuple of RMSE for phi and psi angles</p>"},{"location":"learning/#glycontact.learning.sample_angle","title":"<code>sample_angle(weights: torch.Tensor, mus: torch.Tensor, kappas: torch.Tensor) -&gt; torch.Tensor</code>","text":"<p>Sample an angle from a mixture of von Mises distributions.</p> <p>Parameters:</p> Name Type Description Default <code>weights</code> <code>Tensor</code> <p>Mixture weights [n_components]</p> required <code>mus</code> <code>Tensor</code> <p>Mean angles in degrees [n_components]</p> required <code>kappas</code> <code>Tensor</code> <p>Concentration parameters [n_components]</p> required <p>Returns:</p> Type Description <code>Tensor</code> <p>Sampled angle in degrees</p>"},{"location":"learning/#glycontact.learning.sample_from_model","title":"<code>sample_from_model(model: torch.nn.Module, structures: list[torch_geometric.data.Data, nx.DiGraph], count: int = 10)</code>","text":"<p>Sample from the model using the provided structures</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Module</code> <p>The trained model</p> required <code>structures</code> <code>list[Data, DiGraph]</code> <p>List of structure graphs</p> required <p>Returns:</p> Type Description <p>List of sampled angles</p>"},{"location":"learning/#glycontact.learning.value_rmse","title":"<code>value_rmse(predicted_graphs: list[nx.DiGraph], true_graphs: list[nx.DiGraph], name: Literal['SASA', 'flexibility']) -&gt; float</code>","text":"<p>Calculate the root mean square error (RMSE) for a specific property (SASA or flexibility).</p> <p>Parameters:</p> Name Type Description Default <code>predicted_graphs</code> <code>list[DiGraph]</code> <p>List of predicted structure graphs</p> required <code>true_graphs</code> <code>list[DiGraph]</code> <p>List of true structure graphs</p> required <code>name</code> <code>Literal['SASA', 'flexibility']</code> <p>The property to calculate RMSE for (e.g., \"SASA\" or \"flexibility\")</p> required <p>Returns:</p> Type Description <code>float</code> <p>RMSE value</p>"},{"location":"lwca/","title":"glycontact.lwca module","text":""},{"location":"lwca/#glycontact.lwca","title":"<code>glycontact.lwca</code>","text":""},{"location":"lwca/#glycontact.lwca.LinearWarmupCosineAnnealingLR","title":"<code>LinearWarmupCosineAnnealingLR(optimizer: Optimizer, warmup_epochs: int, max_epochs: int, warmup_start_lr: float = 0.0, eta_min: float = 0.0, last_epoch: int = -1, **kwargs)</code>","text":"<p>               Bases: <code>_LRScheduler</code></p> <p>Sets the learning rate of each parameter group to follow a linear warmup schedule between warmup_start_lr and base_lr followed by a cosine annealing schedule between base_lr and eta_min. .. warning::     It is recommended to call :func:<code>.step()</code> for :class:<code>LinearWarmupCosineAnnealingLR</code>     after each iteration as calling it after each epoch will keep the starting lr at     warmup_start_lr for the first epoch which is 0 in most cases. .. warning::     passing epoch to :func:<code>.step()</code> is being deprecated and comes with an EPOCH_DEPRECATION_WARNING.     It calls the :func:<code>_get_closed_form_lr()</code> method for this scheduler instead of     :func:<code>get_lr()</code>. Though this does not change the behavior of the scheduler, when passing     epoch param to :func:<code>.step()</code>, the user should call the :func:<code>.step()</code> function before calling     train and validation methods.</p> <p>Parameters:</p> Name Type Description Default <code>optimizer</code> <code>Optimizer</code> <p>Wrapped optimizer.</p> required <code>warmup_epochs</code> <code>int</code> <p>Maximum number of iterations for linear warmup</p> required <code>max_epochs</code> <code>int</code> <p>Maximum number of iterations</p> required <code>warmup_start_lr</code> <code>float</code> <p>Learning rate to start the linear warmup. Default: 0.</p> <code>0.0</code> <code>eta_min</code> <code>float</code> <p>Minimum learning rate. Default: 0.</p> <code>0.0</code> <code>last_epoch</code> <code>int</code> <p>The index of last epoch. Default: -1.</p> <code>-1</code>"},{"location":"lwca/#glycontact.lwca.LinearWarmupCosineAnnealingLR.get_lr","title":"<code>get_lr() -&gt; List[float]</code>","text":"<p>Compute learning rate using chainable form of the scheduler.</p>"},{"location":"lwca/#glycontact.lwca.linear_warmup_decay","title":"<code>linear_warmup_decay(warmup_steps, total_steps, cosine=True, linear=False)</code>","text":"<p>Linear warmup for warmup_steps, optionally with cosine annealing or linear decay to 0 at total_steps.</p>"},{"location":"overview/","title":"Overview","text":"<p>GlyContact is an open-source Python package designed specifically for glycan structure analysis that can be entirely operated with glycan sequences (in any chosen nomenclature).  It enables retrieving and processing three-dimensional glycan structures, performing sophisticated conformational analyses, and investigation of structure-function relationships. </p> <p>Many functionalities within GlyContact allow users to produce and retrieve heatmap plots or overlays of glycan sequences. Below are some code examples and their associated outputs. For more specific examples, please have a look at the <code>Examples</code> section.</p> <p></p>"},{"location":"overview/#glycan-contact-maps","title":"Glycan Contact Maps","text":"<p>Contact maps reveal the spatial relationships between monosaccharides in a glycan structure. These maps help identify which parts of the glycan are in close proximity, providing insights into potential functional regions.</p> <pre><code>from glycontact.process import get_contact_tables\n# Get monosaccharide contact tables\nglycan = \"Gal(b1-4)GlcNAc(b1-2)Man(a1-3)[Gal(b1-4)GlcNAc(b1-2)Man(a1-6)]Man(b1-4)GlcNAc(b1-4)[Fuc(a1-6)]GlcNAc\"\ncontact_tables = get_contact_tables(glycan, level=\"monosaccharide\")\n\nfrom glycontact.visualize import draw_contact_map\n# Visualize the first contact map\ndraw_contact_map(contact_tables[0], size=1.0)\n</code></pre> <p></p> <p></p>"},{"location":"overview/#surface-accessibility-and-flexibility","title":"Surface Accessibility and Flexibility","text":"<p>The solvent-accessible surface area (SASA) and flexibility of monosaccharides are crucial determinants of glycan-protein interactions. GlyContact calculates these properties and allows visualization of their distribution across the glycan structure.</p> <pre><code>from glycontact.visualize import plot_glycan_score\nplot_glycan_score(glycan, attribute=\"SASA\")\n</code></pre> <p></p> <p></p>"},{"location":"overview/#glycosidic-torsion-angles","title":"Glycosidic Torsion Angles","text":"<p>Glycosidic torsion angles (phi/psi) determine the overall shape of glycans. GlyContact can analyze these angles across multiple structures to identify preferred conformations, similar to protein Ramachandran plots.</p> <pre><code>from glycontact.visualize import ramachandran_plot\nramachandran_plot(\"GlcNAc(b1-4)GlcNAc\")\n</code></pre> <p></p>"},{"location":"process/","title":"glycontact.process module","text":""},{"location":"process/#glycontact.process","title":"<code>glycontact.process</code>","text":""},{"location":"process/#glycontact.process.ComplexDictSerializer","title":"<code>ComplexDictSerializer</code>","text":"<p>               Bases: <code>DataFrameSerializer</code></p> <p>Extends DataFrameSerializer with methods to handle complex defaultdict structures.</p>"},{"location":"process/#glycontact.process.ComplexDictSerializer.deserialize_complex_dict","title":"<code>deserialize_complex_dict(path: str) -&gt; defaultdict</code>  <code>classmethod</code>","text":"<p>Deserialize a defaultdict of (DataFrame, dict) tuples from a single JSON file</p>"},{"location":"process/#glycontact.process.ComplexDictSerializer.serialize_complex_dict","title":"<code>serialize_complex_dict(data_dict: defaultdict, path: str) -&gt; None</code>  <code>classmethod</code>","text":"<p>Serialize a defaultdict of (DataFrame, dict) tuples to a single JSON file</p>"},{"location":"process/#glycontact.process.align_point_sets","title":"<code>align_point_sets(mobile_coords, ref_coords, fast=False)</code>","text":"<p>Find optimal rigid transformation to align two point sets using SVD-based Kabsch algorithm or Nelder-Mead optimization. Args:   mobile_coords (np.ndarray): Nx3 array of coordinates to transform   ref_coords (np.ndarray): Mx3 array of reference coordinates   fast (bool): Whether to use SVD-based Kabsch algorithm with k-d trees or Nelder-Mead optimization. Defaults to the latter Returns:   Tuple of (transformed coordinates, RMSD)</p>"},{"location":"process/#glycontact.process.annotate_pdb_data","title":"<code>annotate_pdb_data(pdb_dataframe, mapping_dict)</code>","text":"<p>Annotates PDB data with IUPAC nomenclature using the mapping dictionary. Args:     pdb_dataframe (pd.DataFrame): DataFrame with PDB coordinates.     mapping_dict (dict): Mapping from PDB to IUPAC nomenclature. Returns:     pd.DataFrame: Annotated dataframe with IUPAC column.</p>"},{"location":"process/#glycontact.process.annotation_pipeline","title":"<code>annotation_pipeline(glycan, pdb_file=None, threshold=3.5, stereo=None)</code>","text":"<p>Combines all annotation steps to convert PDB files to IUPAC annotations. Args:     glycan (str): IUPAC glycan sequence.     pdb_file (str or list, optional): Path(s) to PDB file(s).     threshold (float): Distance threshold for interactions.     stereo (str, optional): 'alpha' or 'beta' stereochemistry. Returns:     tuple: (dataframes_list, interaction_dicts_list) for all processed PDBs.</p>"},{"location":"process/#glycontact.process.calculate_ring_pucker","title":"<code>calculate_ring_pucker(df: pd.DataFrame, residue_number: int) -&gt; Dict</code>","text":"<p>Calculate ring puckering parameters for a monosaccharide using the Cremer-Pople method. Args:   df (pd.DataFrame): DataFrame with PDB coordinates   residue_number (int): Residue number to analyze Returns:   dict: Dictionary with puckering parameters</p>"},{"location":"process/#glycontact.process.calculate_torsion_angle","title":"<code>calculate_torsion_angle(coords: List[List[float]]) -&gt; float</code>","text":"<p>Calculate torsion angle from 4 xyz coordinates. Args:   coords (list): List of 4 [x,y,z] coordinates Returns:   float: Torsion angle in degrees</p>"},{"location":"process/#glycontact.process.check_graph_content","title":"<code>check_graph_content(G)</code>","text":"<p>Prints node and edge information from a graph for inspection. Args:     G (nx.Graph): NetworkX graph object. Returns:     None: Prints information to console.</p>"},{"location":"process/#glycontact.process.check_reconstructed_interactions","title":"<code>check_reconstructed_interactions(interaction_dict)</code>","text":"<p>Verifies if the reconstructed glycan is connected as a single component. Args:     interaction_dict (dict): Dictionary of interactions. Returns:     bool: True if glycan is correctly reconstructed as a single connected component.</p>"},{"location":"process/#glycontact.process.compare_graphs_with_attributes","title":"<code>compare_graphs_with_attributes(G_contact, G_work)</code>","text":"<p>Performs attribute-aware isomorphism check between two glycan graphs. Args:     G_contact (nx.Graph): Glycontact graph.     G_work (nx.Graph): Glycowork graph. Returns:     dict: Mapping between node indices or empty dict if not isomorphic.</p>"},{"location":"process/#glycontact.process.compute_merge_SASA_flexibility","title":"<code>compute_merge_SASA_flexibility(glycan, mode='weighted', stereo=None, my_path=None)</code>","text":"<p>Merges SASA and flexibility data for a glycan structure. Args:     glycan (str): IUPAC glycan sequence.     mode (str, optional): 'standard', 'amplify', or 'weighted' for flexibility calculation.     stereo (str, optional): 'alpha' or 'beta' stereochemistry.     my_path (str, optional): Custom path to PDB folders. Returns:     pd.DataFrame: Combined table with SASA and flexibility (as RMSF) metrics.</p>"},{"location":"process/#glycontact.process.convert_glycan_to_class","title":"<code>convert_glycan_to_class(glycan)</code>","text":"<p>Converts monosaccharides in a glycan string to abstract classes. Args:     glycan (str): IUPAC glycan sequence. Returns:     str: Modified glycan string with abstracted monosaccharide classes.</p>"},{"location":"process/#glycontact.process.correct_dataframe","title":"<code>correct_dataframe(df)</code>","text":"<p>Corrects monosaccharide assignments in the dataframe based on atom counts. Args:     df (pd.DataFrame): Annotated dataframe from annotate_pdb_data. Returns:     pd.DataFrame: Corrected dataframe with fixed monosaccharide assignments.</p>"},{"location":"process/#glycontact.process.create_glycontact_annotated_graph","title":"<code>create_glycontact_annotated_graph(glycan: str, mapping_dict, g_contact, libr=None) -&gt; nx.Graph</code>","text":"<p>Creates a glycowork graph annotated with glycontact structural data. Args:     glycan (str): IUPAC glycan sequence.     mapping_dict (dict): Node mapping from compare_graphs_with_attributes.     g_contact (nx.Graph): Glycontact graph with structural attributes.     libr (dict, optional): Custom library for glycan_to_nxGraph. Returns:     nx.Graph: Annotated glycowork graph with combined information.</p>"},{"location":"process/#glycontact.process.create_mapping_dict_and_interactions","title":"<code>create_mapping_dict_and_interactions(df, valid_fragments, n_glycan, furanose_end, d_end, is_protein_complex)</code>","text":"<p>Creates mapping dictionaries for converting PDB residue names to IUPAC notation. Args:     df (pd.DataFrame): Interaction dataframe from extract_binary_interactions_from_PDB.     valid_fragments (set): Valid monosaccharide link fragments from glycowork.     n_glycan (bool): If True, applies N-glycan-specific corrections.     furanose_end (bool): If True, considers furanose forms for terminal residues.     d_end (bool): If True, considers D-form for terminal residues.     is_protein_complex (bool): If True, assumes glycan comes from protein-glycan PDB Returns:     tuple: (mapping_dict, interaction_dict) for PDB to IUPAC conversion.</p>"},{"location":"process/#glycontact.process.df_to_pdb_content","title":"<code>df_to_pdb_content(df)</code>","text":"<p>Convert a DataFrame containing PDB-like data to PDB file content. Args:   df: DataFrame with columns matching PDB HETATM/ATOM format Returns:   String containing PDB-formatted content</p>"},{"location":"process/#glycontact.process.download_from_glycoshape","title":"<code>download_from_glycoshape(IUPAC)</code>","text":"<p>Downloads PDB files for a given IUPAC sequence from the GlycoShape database. Args:     IUPAC (str): IUPAC-formatted glycan sequence to download. Returns:     bool: False if IUPAC is improperly formatted, None otherwise.</p>"},{"location":"process/#glycontact.process.extract_3D_coordinates","title":"<code>extract_3D_coordinates(pdb_file)</code>","text":"<p>Extracts 3D coordinates from a PDB file and returns them as a DataFrame. Args:     pdb_file (str): Path to the PDB file. Returns:     pd.DataFrame: DataFrame containing extracted atom coordinates with columns for                  atom information, coordinates, and properties.</p>"},{"location":"process/#glycontact.process.extract_binary_glycontact_interactions","title":"<code>extract_binary_glycontact_interactions(interaction_dict, mapping_dict)</code>","text":"<p>Transforms PDB-based interactions into IUPAC binary interactions. Args:     interaction_dict (dict): Dict of interactions from create_mapping_dict_and_interactions.     mapping_dict (dict): Mapping dict from create_mapping_dict_and_interactions. Returns:     list: List of binary interaction tuples in IUPAC format.</p>"},{"location":"process/#glycontact.process.extract_binary_glycowork_interactions","title":"<code>extract_binary_glycowork_interactions(graph_output)</code>","text":"<p>Extracts binary interactions from glycowork graph output. Args:     graph_output (tuple): Output from glycan_to_graph function. Returns:     list: List of binary interaction pairs.</p>"},{"location":"process/#glycontact.process.extract_binary_interactions_from_PDB","title":"<code>extract_binary_interactions_from_PDB(coordinates_df)</code>","text":"<p>Extracts binary interactions between C1/C2 atoms and oxygen atoms from coordinates. Args:     coordinates_df (pd.DataFrame): Coordinate dataframe from extract_3D_coordinates. Returns:     pd.DataFrame or list of pd.DataFrame: DataFrame with columns 'Atom', 'Column', and 'Value'      showing interactions. Returns a list of DataFrames if multiple chains are present.</p>"},{"location":"process/#glycontact.process.extract_glycan_coords","title":"<code>extract_glycan_coords(pdb_filepath, residue_ids=None, main_chain_only=False)</code>","text":"<p>Extracts coordinates of glycan residues from a PDB file. Args:     pdb_filepath (str): Path to PDB file.     residue_ids (list, optional): List of residue numbers to extract.     main_chain_only (bool): If True, extracts only main chain atoms. Returns:     tuple: (coordinates_array, atom_labels).</p>"},{"location":"process/#glycontact.process.fetch_pdbs","title":"<code>fetch_pdbs(glycan, stereo=None)</code>","text":"<p>Given a glycan sequence, will query first GlycoShape and then UniLectin for appropriate PDB files. Args: glycan (str): glycan sequence, preferably in IUPAC-condensed stereo (str, optional): specification of whether reducing end alpha or beta is desired Returns: List of Paths for GlycoShape and list of get_annotation output tuples for UniLectin</p>"},{"location":"process/#glycontact.process.focus_table_on_residue","title":"<code>focus_table_on_residue(table, residue)</code>","text":"<p>Filters a monosaccharide contact table to keep only one residue type. Args:     table (pd.DataFrame): Monosaccharide contact table.     residue (str): Residue type to focus on (e.g., 'MAN'). Returns:     pd.DataFrame: Filtered contact table.</p>"},{"location":"process/#glycontact.process.get_all_clusters_frequency","title":"<code>get_all_clusters_frequency(fresh=False)</code>","text":"<p>Extracts frequency data for all glycan clusters from GlycoShape. Args:     fresh (bool): If True, fetches fresh data from GlycoShape. Returns:     dict: Dictionary mapping IUPAC sequences to cluster frequency lists.</p>"},{"location":"process/#glycontact.process.get_annotation","title":"<code>get_annotation(glycan, pdb_file, threshold=3.5)</code>","text":"<p>Annotates a PDB file with IUPAC nomenclature for a given glycan. Args:     glycan (str): IUPAC glycan sequence.     pdb_file (str): Path to PDB file.     threshold (float or list): Distance threshold for interactions. Returns:     tuple: (annotated_dataframe, interaction_dict) or (empty_dataframe, {}) if validation fails.</p>"},{"location":"process/#glycontact.process.get_contact_tables","title":"<code>get_contact_tables(glycan, stereo=None, level='monosaccharide', my_path=None)</code>","text":"<p>Gets contact tables for a given glycan across all its PDB structures. Args:     glycan (str): IUPAC glycan sequence.     stereo (str, optional): 'alpha' or 'beta' to select stereochemistry.     level (str): 'monosaccharide' or 'atom' to determine detail level.     my_path (str, optional): Custom path to PDB folders. Returns:     list: List of contact tables for each PDB structure.</p>"},{"location":"process/#glycontact.process.get_example_pdb","title":"<code>get_example_pdb(glycan, stereo=None, rng=None)</code>","text":"<p>Gets a random example PDB file for a given glycan. Args:     glycan (str): IUPAC glycan sequence.     stereo (str, optional): 'alpha' or 'beta' stereochemistry.     rng (Random, optional): Random number generator instance. Returns:     Path: Path to a randomly selected PDB file.</p>"},{"location":"process/#glycontact.process.get_glycoshape_IUPAC","title":"<code>get_glycoshape_IUPAC(fresh=False)</code>","text":"<p>Retrieves a list of available glycans from GlycoShape database. Args: fresh (bool): If True, fetches data directly from GlycoShape API.                  If False, uses cached data from the local mirror. Returns:     set: Set of IUPAC-formatted glycan sequences available in the database.</p>"},{"location":"process/#glycontact.process.get_glycosidic_torsions","title":"<code>get_glycosidic_torsions(df: pd.DataFrame, interaction_dict: Dict[str, List[str]]) -&gt; pd.DataFrame</code>","text":"<p>Calculate phi/psi/omega torsion angles for all glycosidic linkages in structure. Args:   df (pd.DataFrame): DataFrame with PDB atomic coordinates   interaction_dict (dict): Dictionary of glycosidic linkages Returns:   pd.DataFrame: Phi/psi angles for each linkage</p>"},{"location":"process/#glycontact.process.get_ring_conformations","title":"<code>get_ring_conformations(df: pd.DataFrame, exclude_types: List[str] = ['ROH', 'MEX', 'PCX', 'SO3', 'ACX']) -&gt; pd.DataFrame</code>","text":"<p>Analyze ring conformations for all residues in structure. Args:   df (pd.DataFrame): DataFrame with PDB coordinates   exclude_types (list): List of residue types to exclude Returns:   pd.DataFrame: DataFrame with ring parameters for each residue</p>"},{"location":"process/#glycontact.process.get_sasa_table","title":"<code>get_sasa_table(glycan, stereo=None, my_path=None, fresh=False)</code>","text":"<p>Calculates solvent accessible surface area (SASA) for each monosaccharide. Args:     glycan (str): IUPAC glycan sequence.     stereo (str, optional): 'alpha' or 'beta' stereochemistry.     my_path (str, optional): Custom path to PDB folders.     fresh (bool): If True, fetches fresh cluster frequencies. Returns:     pd.DataFrame: Table with SASA values and statistics for each monosaccharide.</p>"},{"location":"process/#glycontact.process.get_similar_glycans","title":"<code>get_similar_glycans(query_glycan, pdb_path=None, glycan_database=None, rmsd_cutoff=2.0, fast=False, unilectin_id=0)</code>","text":"<p>Search for structurally similar glycans by comparing against all available conformers/structures and keeping the best match for each glycan. Args:   query_glycan (str): PDB file or coordinates of query structure   pdb_path (str, optional): Optional specific path to query PDB file   glycan_database (list, optional): List of candidate glycan structures   rmsd_cutoff (float): Maximum RMSD to consider as similar   fast (bool): Whether to use SVD-based Kabsch algorithm with k-d trees or Nelder-Mead optimization. Defaults to the latter   unilectin_id (int): if pdb_path=='unilectin', will retrieve that structure ID from unilectin; Defaults to the first Returns:   List of (glycan_id, rmsd, best_structure) tuples sorted by similarity</p>"},{"location":"process/#glycontact.process.get_structure_graph","title":"<code>get_structure_graph(glycan, stereo=None, libr=None, example_path=None, sasa_flex_path=None)</code>","text":"<p>Creates a complete annotated structure graph for a glycan. Args:     glycan (str): IUPAC glycan sequence.     stereo (str, optional): 'alpha' or 'beta' stereochemistry.     libr (dict, optional): Custom library for glycan_to_nxGraph.     example_path (str, optional): Path to a specific PDB, used for torsion angles and conformations.     sasa_flex_path (str, optional): Path to a specific PDB, used for SASA/flexibility. Returns:     nx.Graph: Fully annotated structure graph with all available properties.</p>"},{"location":"process/#glycontact.process.glycan_cluster_pattern","title":"<code>glycan_cluster_pattern(threshold=70, mute=False, fresh=False)</code>","text":"<p>Categorizes glycans based on their cluster distribution patterns. Args:     threshold (float): Percentage threshold for major cluster classification.     mute (bool): If True, suppresses print output.     fresh (bool): If True, fetches fresh data from GlycoShape. Returns:     tuple: (major_clusters_list, minor_clusters_list) sorted by cluster pattern.</p>"},{"location":"process/#glycontact.process.glycowork_vs_glycontact_interactions","title":"<code>glycowork_vs_glycontact_interactions(glycowork_interactions, glycontact_interactions)</code>","text":"<p>Compares binary interactions from glycowork and glycontact for validation. Args:     glycowork_interactions (list): Interactions from glycowork.     glycontact_interactions (list): Interactions from glycontact. Returns:     bool: True if interactions are consistent (excluding special cases).</p>"},{"location":"process/#glycontact.process.group_by_silhouette","title":"<code>group_by_silhouette(glycan_list, mode='X')</code>","text":"<p>Groups glycans by their topological silhouette/branching pattern. Args:     glycan_list (list): List of IUPAC glycan sequences.     mode (str): 'X' for simple abstraction or 'class' for detailed classes. Returns:     pd.DataFrame: DataFrame of glycans annotated with silhouette and group.</p>"},{"location":"process/#glycontact.process.inter_structure_frequency_table","title":"<code>inter_structure_frequency_table(glycan, stereo=None, threshold=5, my_path=None)</code>","text":"<p>Creates a table showing frequency of contacts between residues across structures. Args:     glycan (str or list): Glycan in IUPAC sequence or list of contact tables.     stereo (str, optional): 'alpha' or 'beta' to select stereochemistry.     threshold (float): Maximum distance for determining a contact.     my_path (str, optional): Custom path to PDB folders. Returns:     pd.DataFrame: Table of contact frequencies across structures.</p>"},{"location":"process/#glycontact.process.inter_structure_variability_table","title":"<code>inter_structure_variability_table(glycan, stereo=None, mode='standard', my_path=None, fresh=False)</code>","text":"<p>Creates a table showing stability of atom/monosaccharide positions across different PDB structures of the same glycan. Args:     glycan (str or list): Glycan in IUPAC sequence or list of contact tables.     stereo (str, optional): 'alpha' or 'beta' to select stereochemistry.     mode (str): 'standard', 'amplify', or 'weighted' for different calculation methods.     my_path (str, optional): Custom path to PDB folders.     fresh (bool): If True, fetches fresh cluster frequencies. Returns:     pd.DataFrame: Variability table showing how much positions vary across structures.</p>"},{"location":"process/#glycontact.process.make_atom_contact_table","title":"<code>make_atom_contact_table(coord_df, threshold=10, mode='exclusive')</code>","text":"<p>Creates a contact table showing distances between atoms in a PDB structure. Args:     coord_df (pd.DataFrame): Dataframe of coordinates from extract_3D_coordinates.     threshold (float): Maximum distance to consider, longer distances set to threshold+1.     mode (str): 'exclusive' to exclude intra-residue distances, 'inclusive' to include them. Returns:     pd.DataFrame: Matrix of distances between atoms.</p>"},{"location":"process/#glycontact.process.make_correlation_matrix","title":"<code>make_correlation_matrix(glycan, stereo=None, my_path=None)</code>","text":"<p>Computes a Pearson correlation matrix between residue positions across structures. Args:     glycan (str or list): Glycan in IUPAC sequence or list of contact tables.     stereo (str, optional): 'alpha' or 'beta' to select stereochemistry.     my_path (str, optional): Custom path to PDB folders. Returns:     pd.DataFrame: Correlation matrix showing relationships between residue positions.</p>"},{"location":"process/#glycontact.process.make_monosaccharide_contact_table","title":"<code>make_monosaccharide_contact_table(coord_df, threshold=10, mode='binary')</code>","text":"<p>Creates a contact table at the monosaccharide level rather than atom level. Args:     coord_df (pd.DataFrame): Dataframe of coordinates from extract_3D_coordinates.     threshold (float): Maximum distance to consider.     mode (str): 'binary' for binary contact matrix, 'distance' for distance values,                'both' to return both matrices. Returns:     pd.DataFrame or list: Contact table(s) between monosaccharides.</p>"},{"location":"process/#glycontact.process.map_data_to_graph","title":"<code>map_data_to_graph(computed_df, interaction_dict, ring_conf_df=None, torsion_df=None)</code>","text":"<p>Creates a NetworkX graph with node-level structural data. Args:     computed_df (pd.DataFrame): DataFrame with computed monosaccharide properties.     interaction_dict (dict): Dictionary of glycosidic linkages.     ring_conf_df (pd.DataFrame, optional): Ring conformation data.     torsion_df (pd.DataFrame, optional): Torsion angle data. Returns:     nx.Graph: Graph with nodes/edges representing glycan structure and properties.</p>"},{"location":"process/#glycontact.process.monosaccharide_preference_structure","title":"<code>monosaccharide_preference_structure(df, monosaccharide, threshold, mode='default')</code>","text":"<p>Finds preferred partners for a given monosaccharide. Args:     df (pd.DataFrame): Monosaccharide distance table.     monosaccharide (str): Target monosaccharide type.     threshold (float): Minimum distance to exclude covalent bonds.     mode (str): 'default', 'monolink', or 'monosaccharide' for different reporting formats. Returns:     dict: Dictionary of preferred partners for the target monosaccharide.</p>"},{"location":"process/#glycontact.process.multi_glycan_monosaccharide_preference_structure","title":"<code>multi_glycan_monosaccharide_preference_structure(glycan, monosaccharide, stereo=None, threshold=3.5, mode='default')</code>","text":"<p>Visualizes monosaccharide partner preferences across multiple structures. Args:     glycan (str): IUPAC glycan sequence.     monosaccharide (str): Target monosaccharide type.     stereo (str, optional): 'alpha' or 'beta' stereochemistry.     threshold (float): Minimum distance to exclude covalent bonds.     mode (str): 'default', 'monolink', or 'monosaccharide' for different reporting formats. Returns:     None: Displays a bar plot of partner frequencies.</p>"},{"location":"process/#glycontact.process.process_interactions","title":"<code>process_interactions(coordinates_df)</code>","text":"<p>Extracts binary interactions between C1/C2 atoms and oxygen atoms from coordinates. Args:     coordinates_df (pd.DataFrame): Coordinate dataframe from extract_3D_coordinates. Returns:     pd.DataFrame: DataFrame with columns 'Atom', 'Column', and 'Value' showing interactions.</p>"},{"location":"process/#glycontact.process.process_interactions_result","title":"<code>process_interactions_result(res, threshold, valid_fragments, n_glycan, furanose_end, d_end, is_protein_complex, glycan, df)</code>","text":"<p>Process a single interaction result and return the annotation if valid.</p>"},{"location":"process/#glycontact.process.remove_and_concatenate_labels","title":"<code>remove_and_concatenate_labels(graph)</code>","text":"<p>Processes a graph by removing odd-indexed nodes and concatenating labels. Args:     graph (nx.Graph): NetworkX graph object. Returns:     nx.Graph: Modified graph with simplified structure.</p>"},{"location":"process/#glycontact.process.superimpose_glycans","title":"<code>superimpose_glycans(ref_glycan, mobile_glycan, ref_residues=None, mobile_residues=None, main_chain_only=False, fast=False)</code>","text":"<p>Superimpose two glycan structures and calculate RMSD. Args:   ref_glycan (str): Reference glycan or PDB path.   mobile_glycan (str): Mobile glycan or PDB path to superimpose.   ref_residues (list, optional): Residue numbers for reference glycan.   mobile_residues (list, optional): Residue numbers for mobile glycan.   main_chain_only (bool): If True, uses only main chain atoms.   fast (bool): Whether to use SVD-based Kabsch algorithm with k-d trees or Nelder-Mead optimization. Defaults to the latter Returns:   Dict containing:       - ref_coords: Original coordinates of reference       - transformed_coords: Aligned mobile coordinates       - rmsd: Root mean square deviation       - ref_labels: Atom labels from reference structure       - mobile_labels: Atom labels from mobile structure       - ref_conformer: PDB path of reference conformer       - mobile_conformer: PDB path of mobile conformer</p>"},{"location":"process/#glycontact.process.trim_gcontact","title":"<code>trim_gcontact(G_contact)</code>","text":"<p>Removes node 1 (-R terminal) from glycontact graph and connects its neighbors. Args:     G_contact (nx.Graph): Glycontact graph. Returns:     None: Modifies graph in-place.</p>"},{"location":"visualize/","title":"glycontact.visualize module","text":""},{"location":"visualize/#glycontact.visualize","title":"<code>glycontact.visualize</code>","text":""},{"location":"visualize/#glycontact.visualize.add_snfg_symbol","title":"<code>add_snfg_symbol(view, center, mono_name, alpha=1.0)</code>","text":"<p>Adds a 3D Symbol Nomenclature for Glycans (SNFG) representation to a py3Dmol view. Args:     view (py3Dmol.view): The py3Dmol view object.     center (numpy.ndarray): 3D coordinates for the center of the symbol.     mono_name (str): Name of the monosaccharide (e.g., 'Neu5Ac', 'Gal', 'GlcNAc').     alpha (float, optional): Transparency level (0.0-1.0). Defaults to 1.0. Returns:     None: Modifies the view object in-place.</p>"},{"location":"visualize/#glycontact.visualize.calculate_average_metric","title":"<code>calculate_average_metric(graph, pattern_in, metric)</code>","text":"<p>Calculate average of the specified metric across all nodes in the graph. Excludes nodes related to the pattern to ensure fair comparison. Args:   graph: NetworkX DiGraph of glycan structure   pattern: Pattern to exclude from calculation   metric: Metric to average Returns:   Average value of metric across non-pattern nodes</p>"},{"location":"visualize/#glycontact.visualize.draw_contact_map","title":"<code>draw_contact_map(act, filepath='', size=0.5, return_plot=False)</code>","text":"<p>Visualizes an atom contact map as a heatmap. Args:     act (pd.DataFrame): The atom contact table from make_atom_contact_table()     filepath (str, optional): Path to save the figure. If empty, no file is saved.     size (float, optional): Text size for the plot. Defaults to 0.5.     return_plot (bool, optional): If True, returns the plot object. Defaults to False. Returns:     matplotlib.axes.Axes or None: Heatmap object if return_plot is True, None otherwise.</p>"},{"location":"visualize/#glycontact.visualize.extract_torsion_angles","title":"<code>extract_torsion_angles(disaccharide: str, structure_graphs: Dict[str, nx.DiGraph] = structure_graphs) -&gt; Tuple[List[float], List[float]]</code>","text":"<p>Extract phi and psi torsion angles for a specific disaccharide linkage across all glycan structures. Args:   disaccharide: String representing the disaccharide (e.g., \"Fuc(a1-2)Gal\")   structure_graphs: Dictionary of glycan structure graphs Returns:   Tuple of (phi_angles, psi_angles) lists</p>"},{"location":"visualize/#glycontact.visualize.find_difference","title":"<code>find_difference(glycans, pattern=None, alternative=None, metric='SASA', struc_dict=structure_graphs, plot=False)</code>","text":"<p>Analyze differences in glycan properties between twin pairs based on pattern presence/absence or pattern substitution. Args:   glycans: List of glycan structures to analyze   pattern: String pattern to analyze (e.g., \"[Fuc(a1-6)]\") for presence/absence comparison   alternative: String pattern to compare against the first pattern (e.g., \"a2-6\" vs \"a2-3\")               When provided, function compares substitution rather than presence/absence   metric: Property to compare (default: \"SASA\")   struc_dict: Dictionary of glycan structure graphs   plot: Whether to generate and return a visualization (default: False) Returns:   Dictionary with statistical analysis results</p>"},{"location":"visualize/#glycontact.visualize.make_gif","title":"<code>make_gif(prefix, tables)</code>","text":"<p>Creates an animated GIF from a series of contact map visualizations. Args:     prefix (str): Prefix for the output filename.     tables (list): List of contact tables to animate, one per frame. Returns:     None: Displays the resulting GIF animation.</p>"},{"location":"visualize/#glycontact.visualize.plot_glycan_3D","title":"<code>plot_glycan_3D(glycan, filepath=None, stereo=None, view=None, show_volume=False, volume_params={}, **plot_kwargs)</code>","text":"<p>Creates a 3D visualization of a glycan structure from its IUPAC sequence. Args:     glycan (str): IUPAC glycan sequence.     stereo (str, optional): Stereochemistry specification ('alpha' or 'beta').                            If None, inferred from sequence.     filepath (str, optional): Path to PDB file to use.     view (py3Dmol.view, optional): Existing py3Dmol view object. If None, creates new.     show_volume (bool, optional): Whether to show volume surface. Defaults to False.     volume_params (dict, optional): Parameters for volume rendering.     **plot_kwargs: Additional arguments passed to _do_3d_plotting. Returns:     py3Dmol.view: The configured view object with rendered glycan.</p>"},{"location":"visualize/#glycontact.visualize.plot_glycan_score","title":"<code>plot_glycan_score(glycan, score_list=[], attribute='SASA', filepath='')</code>","text":"<p>Displays a glycan structure with monosaccharides highlighted according to a score. Args:     glycan (str): IUPAC glycan sequence.     score_list (list, optional): List of values for highlighting monosaccharides.                                 If empty, uses values from the structure graph.     attribute (str, optional): Attribute to use from structure graph if score_list is empty.                               Defaults to \"SASA\".     filepath (str, optional): Path prefix for output file. If empty, no file is saved.  Returns:     GlycoDraw: The rendered glycan drawing object.</p>"},{"location":"visualize/#glycontact.visualize.plot_monosaccharide_instability","title":"<code>plot_monosaccharide_instability(glycan, filepath='', mode='sum')</code>","text":"<p>Plots monosaccharide variability across different clusters of a glycan. Args:     glycan (str): IUPAC glycan sequence.     filepath (str, optional):  Path prefix for output file. If empty, no file is saved.      mode (str, optional): Method for aggregating variability ('sum' or 'mean'). Defaults to 'sum'. Returns:     None: Displays the plot and optionally saves to file.</p>"},{"location":"visualize/#glycontact.visualize.plot_superimposed_glycans","title":"<code>plot_superimposed_glycans(superposition_result, filepath='', animate=True, rotation_speed=1, show_labels=False, show_snfg=True)</code>","text":"<p>Creates a 3D visualization of superimposed glycan structures. Args:     superposition_result (dict): Output from superimpose_glycans() function.     filepath (str, optional): Path to save the visualization image. If empty, no file is saved.     animate (bool, optional): Whether to animate the visualization. Defaults to True.     rotation_speed (int, optional): Speed of rotation if animated. Defaults to 1.     show_labels (bool, optional): Whether to show monosaccharide labels. Defaults to False.     show_snfg (bool, optional): Whether to show SNFG symbols. Defaults to True. Returns:     py3Dmol.view: The configured view object with rendered superimposed glycans.</p>"},{"location":"visualize/#glycontact.visualize.ramachandran_plot","title":"<code>ramachandran_plot(disaccharide: str, structure_graphs: Dict[str, nx.DiGraph] = structure_graphs, density: bool = True, filepath: Optional[str] = None) -&gt; plt.Figure</code>","text":"<p>Generate a Ramachandran plot for a specific disaccharide linkage. Args:   disaccharide: String representing the disaccharide (e.g., \"Fuc(a1-2)Gal\")   structure_graphs: Dictionary of glycan structure graphs   density: Whether to show density contours (default: True)   filepath: Path to save the figure (optional) Returns:   Matplotlib figure object</p>"},{"location":"visualize/#glycontact.visualize.show_correlation_dendrogram","title":"<code>show_correlation_dendrogram(corr_df, font_size=1)</code>","text":"<p>Creates a hierarchical clustering dendrogram from a correlation matrix. Args:     corr_df (pd.DataFrame): Correlation matrix as a DataFrame.     font_size (float, optional): Font size for the plot. Defaults to 1. Returns:     dict: Dictionary mapping cluster colors to lists of monosaccharides in each cluster.</p>"},{"location":"visualize/#glycontact.visualize.show_correlations","title":"<code>show_correlations(corr_df, font_size=1)</code>","text":"<p>Visualizes a correlation matrix as a heatmap. Args:     corr_df (pd.DataFrame): Correlation matrix as a DataFrame.     font_size (float, optional): Font size for the plot. Defaults to 1. Returns:     None: Displays the heatmap.</p>"},{"location":"visualize/#glycontact.visualize.show_monosaccharide_preference_structure","title":"<code>show_monosaccharide_preference_structure(df, monosaccharide, threshold, mode='default')</code>","text":"<p>Visualizes preference statistics for a specific monosaccharide type. Args:     df (pd.DataFrame): Monosaccharide distance table.     monosaccharide (str): Target monosaccharide type.     threshold (float): Distance threshold for interactions.     mode (str, optional): Analysis mode ('default', 'monolink', or 'monosaccharide').                          Defaults to 'default'. Returns:     None: Displays a histogram of monosaccharide preferences.</p>"}]}